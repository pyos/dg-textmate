<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>scopeName</key>
	<string>source.dg</string>
	<key>uuid</key>
	<string>7F83CFA2-F04E-4FA5-9AB4-DBF6800888C6</string>
	<key>comment</key>
	<string></string>
	<key>fileTypes</key>
	<array>
		<string>dg</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\(</string>
	<key>foldingStopMarker</key>
	<string>\)</string>
	<key>name</key>
	<string>dg</string>
	<key>patterns</key>
	<array>
		<!-- Ported from Pygments 1.6. -->
		<dict>
			<!-- Text -->
			<key>match</key>
			<string>\s+</string>
		</dict>
		<dict>
			<!-- Comment.Single -->
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.dg</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#).*$\n?</string>
			<key>name</key>
			<string>comment.line.number-sign.dg</string>
		</dict>
		<dict>
			<!-- Number.Bin -->
			<key>match</key>
			<string>(?i)0b[01]+</string>
			<key>name</key>
			<string>constant.numeric.integer.binary.dg</string>
		</dict>
		<dict>
			<!-- Number.Oct -->
			<key>match</key>
			<string>(?i)0o[0-7]+</string>
			<key>name</key>
			<string>constant.numeric.integer.octal.dg</string>
		</dict>
		<dict>
			<!-- Number.Hex -->
			<key>match</key>
			<string>(?i)0x[0-9a-f]+</string>
			<key>name</key>
			<string>constant.numeric.integer.hexadecimal.dg</string>
		</dict>
		<dict>
			<!-- Number.Float -->
			<key>match</key>
			<string>(?i)[+-]?[0-9]+\.[0-9]+(e[+-]?[0-9]+)?j?</string>
			<key>name</key>
			<string>constant.numeric.float.dg</string>
		</dict>
		<dict>
			<!-- Number.Float -->
			<key>match</key>
			<string>(?i)[+-]?[0-9]+e[+-]?[0-9]+j?</string>
			<key>name</key>
			<string>constant.numeric.float.dg</string>
		</dict>
		<dict>
			<!-- Number.Integer -->
			<key>match</key>
			<string>(?i)[+-]?[0-9]+j?</string>
			<key>name</key>
			<string>constant.numeric.integer.decimal.dg</string>
		</dict>
		<dict>
			<!-- String -->
			<key>begin</key>
			<string>([bB][rR]|[rR]?[bB]?)"""</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.dg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"""</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.dg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.dg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.dg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<!-- String -->
			<key>begin</key>
			<string>([bB][rR]|[rR]?[bB]?)'''</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.dg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'''</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.dg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.dg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.dg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<!-- String -->
			<key>begin</key>
			<string>([bB][rR]|[rR]?[bB]?)"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.dg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.dg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.dg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.dg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<!-- String -->
			<key>begin</key>
			<string>([bB][rR]|[rR]?[bB]?)'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.dg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.dg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.dg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.dg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<!-- Operator -->
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.dg</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.dg</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(`)\w+'*(`)</string>
			<key>name</key>
			<string>keyword.operator.function.infix.dg</string>
		</dict>
		<dict>
			<!-- Operator.word -->
			<key>match</key>
			<string>\b(and|in|is|or|where)\b</string>
			<key>name</key>
			<string>keyword.operator.logical.dg</string>
		</dict>
		<dict>
			<!-- Name.Instance -->
			<key>match</key>
			<string>@\s*\w+'*</string>
			<key>name</key>
			<string>variable.other.readwrite.instance.dg</string>
		</dict>
		<dict>
			<!-- Operator -->
			<key>match</key>
			<string>[!$%&amp;*+\-./:&lt;-@\\^|~;,]+</string>
			<key>name</key>
			<string>keyword.operator.dg</string>
		</dict>
		<dict>
			<!-- Name.Builtin -->
			<key>match</key>
			<string>(?x)(?&lt;!\.)(
				bool|bytearray|bytes|classmethod|complex|dict'?|float|frozenset
			   |int|list'?|memoryview|object|property|range|set'?|slice|staticmethod
			   |str|super|tuple'?|type
			)(?!['\w])</string>
			<key>name</key>
			<string>support.type.builtin.dg</string>
		</dict>
		<dict>
			<!-- Name.Builtin -->
			<key>match</key>
			<string>(?x)(?&lt;!\.)(
				abs|all|any|bin|bind|chr|cmp|compile|complex|delattr|dir|divmod
			   |drop|dropwhile|enumerate|eval|filter|flip|foldl1?|format|fst
			   |getattr|globals|hasattr|hash|head|hex|id|init|input|isinstance
			   |issubclass|iter|iterate|last|len|locals|map|mx|min|next|oct|open|ord
			   |pow|print|repr|reversed|round|setattr|scanl1?|snd|sorted|sum|tail|take
			   |takewhile|vars|zip
			)(?!['\w])</string>
			<key>name</key>
			<string>support.function.builtin.dg</string>
		</dict>
		<dict>
			<!-- Name.Builtin.Pseudo -->
			<key>match</key>
			<string>(?x)(?&lt;!\.)(
				Ellipsis|NotImplemented|None|True|False
			)(?!['\w])</string>
			<key>name</key>
			<string>constant.language.dg</string>
		</dict>
		<dict>
			<!-- Name.Builtin.Pseudo -->
			<key>match</key>
			<string>(?x)(?&lt;!\.)(self)(?!['\w])</string>
			<key>name</key>
			<string>variable.language.dg</string>
		</dict>
		<dict>
			<!-- Name.Exception -->
			<key>match</key>
			<string>(?x)(?&lt;!\.)(
				Exception|KeyboardInterrupt|SystemExit|StopIteration|GeneratorExit
			   |[A-Z]\w*(Error|Exception|Warning)
			)(?!['\w])</string>
			<key>name</key>
			<string>support.type.exception.dg</string>
		</dict>
		<dict>
			<!-- Keyword.Reserved -->
			<key>match</key>
			<string>(?x)(?&lt;!\.)(
				except|finally|for|if|import|not|otherwise|raise|subclass|while|with|yield
			)(?!['\w])</string>
			<key>name</key>
			<string>keyword.control.flow.dg</string>
		</dict>
		<dict>
			<!-- Name -->
			<key>match</key>
			<string>[A-Z_]+'*(?!['\w])</string>
			<key>name</key>
			<string>variable.other.dg</string>
		</dict>
		<dict>
			<!-- Keyword.Type -->
			<key>match</key>
			<string>[A-Z]\w*'*(?!['\w])</string>
			<key>name</key>
			<string>support.type.dg</string>
		</dict>
		<dict>
			<!-- Name -->
			<key>match</key>
			<string>\w+'*</string>
		</dict>
		<dict>
			<!-- Punctuation -->
			<key>match</key>
			<string>[()]</string>
			<key>name</key>
			<string>punctuation.block.dg</string>
		</dict>
	</array>
</dict>
</plist>
